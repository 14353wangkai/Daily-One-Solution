# 解码异或后的数组

- 问题描述

  未知 整数数组 arr 由 n 个非负整数组成。

  经编码后变为长度为 n - 1 的另一个整数数组 encoded ，其中 encoded[i] = arr[i] XOR arr[i + 1] 。例如，arr = [1,0,2,1] 经编码后得到 encoded = [1,2,3] 。

  给你编码后的数组 encoded 和原数组 arr 的第一个元素 first（arr[0]）。

  请解码返回原数组 arr 。可以证明答案存在并且是唯一的。




- 问题分析

  根据异或的特性，可以观察得到：

  a ^ b = c

  0 ^ 0 = 0

  0 ^ 1 = 1

  1 ^ 0 = 1

  1 ^ 1 = 0

  a ^ c = b ， b ^ c = a

  因此，原始数组第一位跟结果的第一位异或可以得到原始数组的第二位，依次类推，便可以得到结果。

  

- 问题解答

  ```c++
  class Solution {
  public:
      vector<int> decode(vector<int>& encoded, int first) {
          vector<int> arr;
          arr.push_back(first);
          for (int num : encoded) {
              int decoded = num^first;
              arr.push_back(decoded);
              first = decoded;
          }
          return arr;
      }
  };
  ```

  
  
---

# [1720. 解码异或后的数组](https://leetcode-cn.com/problems/decode-xored-array/)-wk

- 问题描述

  > 未知 整数数组 arr 由 n 个非负整数组成。
  >
  > 经编码后变为长度为 n - 1 的另一个整数数组 encoded ，其中 encoded[i] = arr[i] XOR arr[i + 1] 。例如，arr = [1,0,2,1] 经编码后得到 encoded = [1,2,3] 。
  >
  > 给你编码后的数组 encoded 和原数组 arr 的第一个元素 first（arr[0]）。
  >
  > 请解码返回原数组 arr 。可以证明答案存在并且是唯一的。 

- 问题分析

  - 这题最主要的步骤就是证明异或操作的可逆性
  - 已知异或操作具有性质 `a^b^b=a`， 题目中，`encoded[i] = arr[i] ^ arr[i+1]`， 那么`arr[i]^encode[i]=arr[i+1]`,  所以`arr[i]`可以通过`arr[i-1]`与`encoded[i-1]`得到，题目给定了`arr[0]`以及整个`encoded`数组，因此，通过一次遍历即可解码整个`arr`

- 问题代码

  ```java
  class Solution {
      public int[] decode(int[] encoded, int first) {
          int n = encoded.length + 1;
          int []dec = new int[n];
          dec[0] = first;
          for (int i = 1; i < n; ++i) {
              dec[i] = dec[i-1] ^ encoded[i-1];
          }
          return dec;
      }
  }
  ```

  
