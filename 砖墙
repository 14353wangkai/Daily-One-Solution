- 问题描述

  > 你的面前有一堵矩形的、由 n 行砖块组成的砖墙。这些砖块高度相同（也就是一个单位高）但是宽度不同。每一行砖块的宽度之和应该相等。
  >
  > 你现在要画一条 自顶向下 的、穿过 最少 砖块的垂线。如果你画的线只是从砖块的边缘经过，就不算穿过这块砖。你不能沿着墙的两个垂直边缘之一画线，这样显然是没有穿过一块砖的。
  >
  > 给你一个二维数组 wall ，该数组包含这堵墙的相关信息。其中，wall[i] 是一个代表从左至右每块砖的宽度的数组。你需要找出怎样画才能使这条线 穿过的砖块数量最少 ，并且返回 穿过的砖块数量 。
  >
  > ```
  > 输入：wall = [[1,2,2,1],[3,1,2],[1,3,2],[2,4],[3,1,2],[1,3,1,1]]
  > 输出：2
  > ```

- 问题分析

  - 因为砖块长度是变化的，所以不太好统计，但是空隙的长度是固定为1的，因此好统计，正好两者互补，而总厚度又是明确的，所以统计空隙和统计砖块是一样的
  - 空隙就在一个砖块的最右侧或者最左侧，两种统计都可以，但是要记住，由于左右两端的空隙不算，砖与砖之间，从左侧计算，就得从1开始，到砖墙的长度结束，以右侧计算，则从0开始，到砖墙长度-1结束。
  - 最后，用总厚度-最大空隙数量即可。

- 问题代码

```java
class Solution {
    public int leastBricks(List<List<Integer>> wall) {
        int n = wall.size();
        
        Map<Integer, Integer> map = new HashMap<>();
        int sum = 0;
        for (int i = 0 ;i < n; ++i) {
            sum = 0;
            int m = wall.get(i).size();
            for (int j = 0; j < m-1; ++j) {
                sum += wall.get(i).get(j);
                map.put(sum, map.getOrDefault(sum, 0)+1) ;
            }
        }
        int maxCnt = 0;
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            maxCnt = Math.max(maxCnt, entry.getValue());
        }
 
        return n - maxCnt;
    }
} 
```

